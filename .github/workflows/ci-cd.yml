name: CI/CD Pipeline

on:
  # Trigger on PRs to develop and main
  pull_request:
    branches: [ develop, main ]
    types: [ opened, synchronize, reopened ]
  
  # Trigger on push to main (after PR merge) for production deployment
  push:
    branches: [ main ]

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code Quality Checks (runs on all PRs)
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better analysis
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run Prettier check
      run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"
      
    - name: TypeScript type check
      run: npx tsc --noEmit
      
    - name: Run tests (if exists)
      run: npm test --if-present
      continue-on-error: true  # Don't fail if no tests yet
      
    - name: Check for console.logs in production code
      run: |
        if grep -r "console\.\(log\|debug\|info\)" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.next src/; then
          echo "‚ùå Found console.log statements in production code"
          exit 1
        fi

  # Job 2: Security & Dependency Checks
  security-checks:
    name: Security & Dependency Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for outdated dependencies
      run: npm outdated || true
      
    - name: License check
      run: npx license-checker --production --onlyAllow="MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0"
      continue-on-error: true

  # Job 3: Build Verification
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Check build size
      run: |
        echo "Build completed successfully"
        du -sh .next/

  # Job 4: PR Validation (Additional checks for PRs)
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check PR title format
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        # Check if PR title starts with conventional commit prefix
        if ! echo "$PR_TITLE" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
          echo "‚ùå PR title must follow conventional commits format"
          echo "Examples: feat: add new feature, fix: resolve bug, docs: update README"
          exit 1
        fi
        
    - name: Check branch naming
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        if [[ "${{ github.base_ref }}" == "develop" ]]; then
          # Feature branches targeting develop must follow naming convention
          if ! echo "$BRANCH_NAME" | grep -qE "^(feature|bugfix|hotfix)/.+"; then
            echo "‚ùå Branch name must start with feature/, bugfix/, or hotfix/"
            exit 1
          fi
        fi
        
    - name: Check file changes
      run: |
        # Prevent accidental commits of sensitive files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
        if echo "$CHANGED_FILES" | grep -E "(\.env$|\.env\.local$|\.env\.production$|\.key$|\.pem$)"; then
          echo "‚ùå Sensitive files detected in PR"
          exit 1
        fi

  # Job 5: Deploy Preview (for PRs to develop)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [code-quality, security-checks, build-check, pr-validation]
    if: |
      github.event_name == 'pull_request' && 
      github.base_ref == 'develop' &&
      github.event.pull_request.draft == false
    
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for preview
      env:
        NEXT_PUBLIC_ENV: development
      run: npm run build
      
    - name: Deploy to Vercel Preview
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}
        github-comment: true
        
    - name: Comment deployment URL
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ Preview deployment ready!\n\nURL: ${{ steps.deploy.outputs.preview-url }}\n\n*This is an automated comment*`
          })

  # Job 6: Production Deployment (only after PR merged to main)
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [code-quality, security-checks, build-check]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://decision-mirror.vercel.app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      env:
        NEXT_PUBLIC_ENV: production
      run: |
        echo "Building for production..."
        npm run build
        
    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Notify deployment success
      run: |
        echo "‚úÖ Production deployment successful!"
        # Add Slack/Discord notification here if needed
        
    - name: Create deployment tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        TAG="deploy-$(date +%Y%m%d-%H%M%S)"
        git tag -a "$TAG" -m "Production deployment on $(date)"
        git push origin "$TAG"